#include <stdio.h>
#include <conio.h>
#include <locale.h>
#include <windows.h>
#include <string.h>

struct endereco
{
	char cep[20];
	int numero;
};
struct aluno
{
	char nome[100];
	char matricula[100];
	float cra;
	struct endereco end;	
};

void cadastrar_aluno(struct aluno vet_alunos[], int indice)
{
	printf("\n\nDigite o nome do aluno: ");
	fflush(stdin);
	gets(vet_alunos[indice].nome);
	printf("\nDigite a matricula: ");
	fflush(stdin);
	gets(vet_alunos[indice].matricula);
	printf("\nDigite o CRA: ");
	scanf("%f", &vet_alunos[indice].cra);
	printf("\nDigite o CEP: ");
	fflush(stdin);
	gets(vet_alunos[indice].end.cep);
	printf("\nDigite o numero da residência: ");
	scanf("%d", &vet_alunos[indice].end.numero);
}

void pesquisar_matricula(struct aluno vet_alunos[], int n_alunos)
{
	char matricula_pesquisa[100];
	int i, flag = 0;
	printf("Digite o número de matrícula: ");
	fflush(stdin);
	gets(matricula_pesquisa);
	for(i = 0 ; i < n_alunos; i++)
	{
		if(strcmp(matricula_pesquisa, vet_alunos[i].matricula) == 0)
		{
			flag = 1;
			printf("\n\nNome do aluno: %s \nCRA: %f ",vet_alunos[i].nome,vet_alunos[i].cra);
			printf("\nNúmero da residência: %d \nCEP: %s", vet_alunos[i].end.numero, vet_alunos[i].end.cep);
		}
	}
	if(flag == 0)
		printf("\n\nAluno não cadastrado.");
	getch();
}

int excluir_aluno(struct aluno vet_alunos[], int n_alunos)
{
	char matricula_pesquisa[100];
	int i, flag = 0, op, indice_aluno;
	printf("Digite o número de matrícula: ");
	fflush(stdin);
	gets(matricula_pesquisa);
	for(i = 0 ; i < n_alunos; i++)
	{
		if(strcmp(matricula_pesquisa, vet_alunos[i].matricula) == 0)
		{
			flag = 1;
			printf("\n\nNume do aluno: %s \nCRA: %f",vet_alunos[i].nome,vet_alunos[i].cra);
			printf("\nNúmero da residência: %d \nCEP: %s", vet_alunos[i].end.numero, vet_alunos[i].end.cep);
			indice_aluno = i;
			break;
		}
	}
	if(flag == 1)
	{
		printf("\n\nDeseja mesmo excluir o aluno? Digite: 1 - sim ou 2 - não: ");
		scanf("%d", &op);
		if(op == 1)
		{
			for(i = indice_aluno; i < n_alunos; i++)
				vet_alunos[i] = vet_alunos[i+1];
			return n_alunos - 1;	
		}	
	}
	else
	{
		printf("\nAluno não cadastrado.");	
		getch();
	}
	return n_alunos;
}

void listar_alunos(struct aluno vet_alunos[], int n_alunos)
{
	int i;
	for(i = 0; i < n_alunos; i++)
	{
		printf("\n\nNome: %s \nMatricula: %s", vet_alunos[i].nome, vet_alunos[i].matricula);
		printf("\nCRA: %f \nCEP: %s ", vet_alunos[i].cra, vet_alunos[i].end.cep);
		printf("\nNúmero da residência: %d",vet_alunos[i].end.numero);
	}
	getch();
}
void editar_dados(struct aluno vet_alunos[], int n_alunos)
{
	char matricula_pesquisa[100];
	int i, flag = 0;
	printf("\nDigite o número de matrícula: ");
	fflush(stdin);
	gets(matricula_pesquisa);
	for(i = 0 ; i < n_alunos; i++)
	{
		if(strcmp(matricula_pesquisa, vet_alunos[i].matricula) == 0)
		{
			flag = 1;
			printf("\n\nDigite o nome do aluno: ");
			fflush(stdin);
			gets(vet_alunos[i].nome);
			printf("\nDigite a matricula: ");
			fflush(stdin);
			gets(vet_alunos[i].matricula);
			printf("\nDigite o CRA: ");
			scanf("%f", &vet_alunos[i].cra);
			printf("\nDigite o CEP: ");
			fflush(stdin);
			gets(vet_alunos[i].end.cep);
			printf("\nDigite o numero da residência: ");
			scanf("%d", &vet_alunos[i].end.numero);
		}
	}
	if(flag == 0)
		printf("\n\nAluno não cadastrado.");
	getch();
}
void calculo_media_cra(struct aluno vet_alunos[], int n_alunos)
{
	int i;
	float media, soma = 0;
	for(i=0; i<n_alunos; i++){
		soma = soma + vet_alunos[i].cra;
	}
	media = soma / n_alunos;
	printf("\nA média do CRA é: %f", media);
	for(i=0; i<n_alunos; i++){
		if(vet_alunos[i].cra > media){
			printf("\n\nNome: %s \nMatricula: %s", vet_alunos[i].nome, vet_alunos[i].matricula);
			printf("\nCRA: %f \nCEP: %s ", vet_alunos[i].cra, vet_alunos[i].end.cep);
			printf("\nNúmero da residência: %d",vet_alunos[i].end.numero);
		}
	}
	getch();
}
void mostrar_cra_maior( struct aluno vet_alunos[], int n_alunos)
{
	float maior;
	int i=0;
	maior = vet_alunos[i].cra;
	for(i=0; i<n_alunos; i++){
		if(maior < vet_alunos[i].cra){
			maior = vet_alunos[i].cra;
		}
	}
	printf("\nO aluno com maior CRA é:");
	printf("\n\nNome: %s \nMatricula: %s", vet_alunos[i].nome, vet_alunos[i].matricula);
	printf("\nCRA: %f \nCEP: %s ", vet_alunos[i].cra, vet_alunos[i].end.cep);
	printf("\nNúmero da residência: %d",vet_alunos[i].end.numero);
	getch();
}
int main()
{
	setlocale(LC_ALL, "portuguese");
	struct aluno vetor_alunos[200];
	int num_alunos = 0, opcao;
	do
	{
		system("cls");
		printf("Escolha uma opção:\n\n 1 - Cadastrar um aluno.\n 2 - Pesquisar por matrícula.");
		printf("\n 3 - Excluir um aluno.\n 4 - Listar alunos.\n 5 - Editar dados já cadastrados.");
		printf("\n 6 - Calcular média CRA e mostrar os maiores. \n 7 - Mostrar alunos com maior CRA.\n 8 - Sair do programa.\n\nDigite: ");
		scanf("%d", &opcao);
		switch(opcao)
		{
			case 1:
				system("cls");
				cadastrar_aluno(vetor_alunos, num_alunos);
				num_alunos++;
				break;
			case 2:
				system("cls");
				pesquisar_matricula(vetor_alunos, num_alunos);
				break;
			case 3:
				system("cls");
				num_alunos = excluir_aluno(vetor_alunos, num_alunos);
				break;
			case 4:
				system("cls");
				printf("\n\nLista de alunos cadastrados:\n\n");
				listar_alunos(vetor_alunos, num_alunos);
				break;
			case 5:
				system("cls");
				editar_dados(vetor_alunos, num_alunos);
				break;
			case 6:
				system("cls");
				calculo_media_cra(vetor_alunos, num_alunos);
				break;
			case 7:
				system("cls");
				mostrar_cra_maior(vetor_alunos, num_alunos);
				break;
			default:
				if(opcao != 8)
				{
					printf("\n\nOpção inválida.");
					getch();
				}	
		}
	}while(opcao != 8);
	getch();
	return 0;
}